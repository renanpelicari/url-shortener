package com.shortener.service;

import com.google.common.hash.HashFunction;
import com.google.common.hash.Hashing;
import com.shortener.model.Shortened;
import com.shortener.model.repository.URLShortenerRepository;
import com.shortener.vo.response.URLShortened;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityNotFoundException;
import java.nio.charset.StandardCharsets;
import java.util.Optional;

/**
 * The type Url shortener service.
 */
@Slf4j
@Service
public class URLShortenerService {

    private static final String APP_PREFIX = "http://localhost:8080/";

    private HashFunction hashing = Hashing.murmur3_32(100);

    private URLShortenerRepository repository;

    /**
     * Instantiates a new Url shortener service.
     *
     * @param repository the repository
     */
    public URLShortenerService(final URLShortenerRepository repository) {
        this.repository = repository;
    }

    /**
     * Shorten the passed url. In case the passed url is the short version already, we just return it as is.
     *
     * @param url the url
     * @return the url shortened
     */
    @Transactional
    public URLShortened shortenUrl(final String url) {
        final Shortened shortened = Optional.ofNullable(repository.findByShortenedUrlEquals(url))
            .orElseGet(() -> repository.findByUrlEquals(url));
        if (Optional.ofNullable(shortened).isPresent()) {
            return URLShortened.builder().shortenedUrl(shortened.getShortenedUrl()).build();
        }

        final Shortened shortenedEntity = createShortenedEntity(url);

        final String urlCode = hashing.hashString(shortenedEntity.getId(), StandardCharsets.UTF_8).toString();
        shortenedEntity.setShortenedUrl(APP_PREFIX.concat(urlCode));
        shortenedEntity.setUrlCode(urlCode);

        log.debug("Saving the entity with newly created urlCode={} using the hashKey generated by redis", urlCode);
        repository.save(shortenedEntity);

        return URLShortened.builder().shortenedUrl(shortenedEntity.getShortenedUrl()).build();
    }

    private Shortened createShortenedEntity(final String url) {
        final Shortened newShortened = new Shortened();
        newShortened.setUrl(url);
        log.debug("Saving {}", newShortened);
        return repository.save(newShortened);
    }

    /**
     * Gets url.
     *
     * @param urlCode the url code
     * @return the url
     */
    @Transactional(readOnly = true)
    public String getUrl(final String urlCode) {
        return Optional.ofNullable(repository.findByUrlCodeEquals(urlCode))
            .orElseThrow(() -> new EntityNotFoundException("URL not found for code" + urlCode)).getUrl();
    }
}
